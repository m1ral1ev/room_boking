from aiogram import types
import aiogram.utils.markdown as md
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode
from create_bot import dp
from states.personalData import Form
from keyboards.client_kb import main_menu, available_cars, agreement, Main_menu, Request_contact, car_type, pay_via

# main menu


@dp.message_handler(commands="start")
async def start_cmd(message: types.Message):

    await message.answer(
        md.text(
            md.text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç UzAutoSavdo.\n–ß—Ç–æ —É–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–π –±–æ—Ç:'),
            md.text('- –∑–∞–∫–ª—é—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω –¥–æ–≥–æ–≤–æ—Ä'),
            md.text('- –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö –∏ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏'),
            md.text('- –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–ª —Ü–µ–Ω—Ç—Ä–æ–º –∫–æ–º–ø–∞–Ω–∏–∏'),
            md.text('- —É–∑–Ω–∞–≤–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ –º–æ–¥–µ–ª–µ–π'),
            sep='\n\n'
        ),
        parse_mode=ParseMode.MARKDOWN
    )
    await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ üëáüëáüëá', reply_markup=main_menu)


# available cars


@dp.message_handler(Text(equals='–î–æ—Å—Ç—É–ø–Ω—ã–µ üöò'))
async def available_car(message: types.message):

    await message.answer_document(open('available_cars.docx', 'rb'), reply_markup=available_cars)


# agreement


@dp.message_handler(Text(equals='üóì –û–Ω–ª–∞–π–Ω-–¥–æ–≥–æ–≤–æ—Ä'))
async def dogovor(message: types.Message):

    await message.answer(message.from_user.full_name +
                         ', –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –í–∞—à–µ–≥–æ –ü–∞—Å—Å–ø–æ—Ä—Ç–∞ –∏ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä',
                         reply_markup=agreement)


# Main menu


@dp.message_handler(Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüßæ'))
async def main_menu(message: types.Message):

    await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ üëáüëáüëá', reply_markup=Main_menu)


# Passport photo

@dp.message_handler(Text(equals='–§–æ—Ç–æ –ø–∞—Å—Å–ø–æ—Ä—Ç–∞üì∑'))
async def passport_img(message: types.Message):

    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—Ç—å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –ø–∞—Å—Å–ø–æ—Ä—Ç–∞', reply_markup=types.ReplyKeyboardRemove())


# Request_contact


@dp.message_handler(content_types='photo')
async def telephone(message: types.Message):
    await Form.contact.set()

    await message.answer('–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä.', reply_markup=Request_contact)
    await message.photo[-1].download(destination_dir="photo")


# car_type


@dp.message_handler(content_types='contact', state=Form.contact)
async def success_reg(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data['contact'] = message.contact.phone_number

    await Form.next()

    await message.answer('‚úÖ–°–ø–∞–∏–±–æ. –í–∞—à–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º üöò')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –º–æ–¥–µ–ª–µ–π', reply_markup=car_type)


# pay_via


@dp.message_handler(Text(equals='–í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ãüí∞'), state=Form.just)
async def pay(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data['just'] = message.text

    await Form.next()

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ãüëá', reply_markup=pay_via)


# pay_via_continue


@dp.message_handler(lambda message: message.text in ['–ë–∞–Ω–∫üè¶', '–ö–∞—Ä—Ç–∞üí≥', '–ù–∞–ª–∏—á–Ω—ã–µüíµ'], state=Form.pay_via)
async def pay_via(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data['pay_via'] = message.text

    await Form.next()

    if message.text == '–ë–∞–Ω–∫üè¶':

        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: ',
                             reply_markup=types.ReplyKeyboardRemove())

    elif message.text == '–ö–∞—Ä—Ç–∞üí≥':

        await message.answer('–ù–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n8600 AAAA BBBB CCCC')
        await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –±—ã–ª–æ –Ω–µ–¥—Ä–æ–∑—É–º–µ–Ω–∏–π, '
                             '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –¥–µ–Ω–µ–≥ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –¥–∏–ª–ª–µ—Ä—Å–∫–∏–π —Å–∞–ª–æ–Ω',
                             reply_markup=types.ReplyKeyboardRemove())

    elif message.text == '–ù–∞–ª–∏—á–Ω—ã–µüíµ':

        await message.answer('–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø–æ—Å–µ—Ç–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Ñ–∏–ª–ª–∏–∞–ª–æ–≤',
                             reply_markup=types.ReplyKeyboardRemove())
